#--$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# EXEMPLO - LOGIT NO 'R' $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#--$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

############################
# 0. PACOTES E FONTE DADOS
####+++++++++++++++++++++++

# Dados https://firstratedata.com/free-intraday-data
# Pacotes
library(xts)
library(pROC)
library(epiR)

############################
# 1. DOWNLOAD DATA
####++++++++++++++++++++++++
# Lendo arquivo de dados
Y.ALL = read.csv('AAPL_1min_firstratedata.csv') # LENDO BASE DE DADOS
# Organizando datas
DATE = Y.ALL$timestamp # Datas com minutos
date <- as.POSIXct(DATE, format="%Y-%m-%d %H:%M:%S") # Datas formatas para 'xts'
day =  substr(date,1,10) # obtendo informações do dia
previousday =  c('NA',day[-length(day)]) # dia da observação anterior
checkday = (day==previousday) # checando se dia da observação é o mesmo da observação anterior
# Obtendo série de preços (fechamento)
PRICE = xts(Y.ALL$close,order=date) # Preços (de fechamento) como 'xts' 
names(PRICE)="PRICE"
# Obtendo série de retornos (log-retornos)
return = diff(log(PRICE))
names(return)="return"
return=return[checkday]
plot(return['2023-06-24/2023-06-30'],type='h')
plot(as.vector(return['2023-06-24/2023-06-30']),type='l')
returnday =  substr(index(return),1,10) # obtendo informações do dia

############################
# 2. SÉRIE BINÁRIA E BANCO DE DADOS
####+++++++++++++++++++++++
# Obtendo extremo (quantil negativo)
extreme=quantile(return,.05,na.rm=T)
# Série binária: abaixo do quantil extremo
viol = (return<extreme)*1
# Obtendo defasagens (retornos e violações)  
LAGS=60
RETURNS=NULL
VIOLS=NULL
for(lag in 1:LAGS){
  RETURNS.lag=c(rep(NA,lag)
                ,return[-seq(from=length(return)
                             ,by=-1,length.out=lag)])
  RETURNS=cbind(RETURNS,RETURNS.lag)
  VIOL.lag=c(rep(NA,lag)
             ,viol[-seq(from=length(viol)
                        ,by=-1,length.out=lag)])
  VIOLS=cbind(VIOLS,VIOL.lag)
}
rownames(RETURNS)=index(return)
colnames(RETURNS)=paste0('RET_LAG',1:LAGS)
colnames(VIOLS)=paste0('VIOL_LAG',1:LAGS)
SQ.RETURNS=RETURNS^2
colnames(SQ.RETURNS)=paste0('SQ_RET_LAG',1:LAGS)
# Matriz de dados
X=cbind(RETURNS,SQ.RETURNS,VIOLS)
Y=viol
DATA=as.data.frame(cbind(Y,X))

############################
# 3. MODELO
####+++++++++++++++++++++++
# Selecionando janela de análise e dividindo em treino e teste
DATA.WINDOW = DATA[(returnday>='2023-01-01')&(returnday<'2023-03-01'),]
windowday = substr(rownames(DATA.WINDOW),1,10)
DATA.TREINO = DATA.WINDOW[windowday<='2023-01-31',]
DATA.TESTE = DATA.WINDOW[windowday>'2023-01-31',]
# Modelo (estimado com base em treino)
MOD=glm(formula = return ~ .
        , family = binomial(link = "logit")
        , data = DATA.TREINO)
summary(MOD)
# Testes qui-quadrado de pearson e deviance
DF.chiSQ = nrow(DATA.TREINO)-length(MOD$coefficients)
PearsonResChiSQ = sum(residuals(MOD, type = "pearson")^2)
DevianceResChiSQ = sum(residuals(MOD, type = "deviance")^2)
pvaluePearson = pchisq(PearsonResChiSQ, df=DF.chiSQ, lower.tail = F)
pvalueDeviance = pchisq(DevianceResChiSQ, df=DF.chiSQ, lower.tail = F)
# Medidas de ajuste 
r2 = cor(MOD$data$return,MOD$fitted.values)^2
R2_ss.frac.NUM = sum((MOD$data$return-MOD$fitted.values)^2)
R2_ss.frac.DEN = sum((MOD$data$return-mean(MOD$data$return))^2)
R2_ss = 1 - R2_ss.frac.NUM/R2_ss.frac.DEN

############################
# 4. PREVISÃO DENTRO DA AMOSTRA (TREINO)
####+++++++++++++++++++++++

DATA.USE =  DATA.TREINO
# Previsão
Pred.USE=predict(MOD, newdata=DATA.USE, type="response")
# Curva ROC (calcula especificidade, sensibilidade,...)
Roc.USE=roc(DATA.USE$return, Pred.USE,plot=TRUE, ci=TRUE) #this gives roc



# obtém melhor 'threshold'
Corte.USE <- coords(Roc.USE, "b"
                          , ret = "threshold"
                          , best.method = "youden")



Corte.USE.TREINO = Corte.USE

# Gráfico sensibilidade e especificidade
plot(y=Roc.USE$sensitivities,x=Roc.USE$thresholds
     ,type="l",col='gray80',lwd=2,lty=2
     ,xlab='Pontos de corte',ylab=''
     ,main=paste0('Corte ideal: ',round(Corte.USE,d=2),' (Base TREINO)')
     ,col.main='gray30')


lines(y=Roc.USE$specificitie,x=Roc.USE$thresholds
      ,type="l",col='gray50',lwd=2,lty=3)



abline(v=Corte.USE,col='gray30',lwd=2,lty=1)
legend(x=.4,y=.6,legend=c('Sensibilidade','Especificidade')
       ,col=c('gray80','gray50'),lty=c(2,3),lwd=c(2,2))


# Cálculo área abaixo da curva ROC
AUC.USE=auc(Roc.USE)
AUC.USE.3D = round(as.numeric(AUC.USE),d=3)

# Gráfico curva ROC
plot(y=Roc.USE$sensitivities,x=1-Roc.USE$specificities
     ,ylim=c(0,1),xlim=c(0,1),type='l',lwd=1.5
     ,ylab="Sensibilidade",xlab="1-Especificidade"
     ,main=paste0("Área sob Curva ROC: ",AUC.USE.3D,' (Base TREINO)'))
abline(a=0,b=1,col='gray70')

# confusion matrix
QUEDA=ifelse(DATA.USE$return,'OCORRE','NÃO OCORRE')
PREVISÃO=ifelse(as.vector(Pred.USE) > as.numeric(Corte.USE), 'QUEDA', 'SEM QUEDA')
CM.USE <- table(PREVISÃO,QUEDA)[c('SEM QUEDA','QUEDA'),]
CM.USE.PROP = prop.table(CM.USE,margin=2)
print(paste0("Base TREINO:"))
print(CM.USE.PROP)





# histogramas probabilidades de quedas
par(mfrow=c(2,1))
hist(as.vector(Pred.USE)[QUEDA=='OCORRE'],freq=F,xlim=c(0,0.4)
     ,xlab='',main='QUEDA OCORRE (Base TREINO)',ylab='',breaks=40)
abline(v=Corte.USE,col='gray30',lwd=2,lty=1)
hist(as.vector(Pred.USE)[QUEDA!='OCORRE'],freq=F,xlim=c(0,0.4)
     ,xlab='',main='QUEDA NÃO OCORRE (Base TREINO)',ylab='',breaks=40)
abline(v=Corte.USE,col='gray30',lwd=2,lty=1)
par(mfrow=c(1,1))

############################
# 5. PREVISÃO FORA DA AMOSTRA (TESTE)
####+++++++++++++++++++++++

DATA.USE =  DATA.TESTE
# Previsão
Pred.USE=predict(MOD, newdata=DATA.USE, type="response")
# Curva ROC (calcula especificidade, sensibilidade,...)
Roc.USE=roc(DATA.USE$return, Pred.USE,plot=TRUE, ci=TRUE) #this gives roc
# obtém melhor 'threshold'
Corte.USE <- coords(Roc.USE, "b"
                    , ret = "threshold"
                    , best.method = "youden")




# Gráfico sensibilidade e especificidade
plot(y=Roc.USE$sensitivities,x=Roc.USE$thresholds
     ,type="l",col='gray80',lwd=2,lty=2
     ,xlab='Pontos de corte',ylab=''
     ,main=paste0('Corte ideal: ',round(Corte.USE,d=2),' (Base TESTE)')
     ,col.main='gray30')
lines(y=Roc.USE$specificities,x=Roc.USE$thresholds
      ,type="l",col='gray50',lwd=2,lty=3)
abline(v=Corte.USE,col='gray30',lwd=2,lty=1)
legend(x=.4,y=.6,legend=c('Sensibilidade','Especificidade')
       ,col=c('gray80','gray50'),lty=c(2,3),lwd=c(2,2))





# Cálculo área abaixo da curva ROC
AUC.USE=auc(Roc.USE)
AUC.USE.3D = round(as.numeric(AUC.USE),d=3)



# Gráfico curva ROC
plot(y=Roc.USE$sensitivities,x=1-Roc.USE$specificities
     ,ylim=c(0,1),xlim=c(0,1),type='l',lwd=1.5
     ,ylab="Sensibilidade",xlab="1-Especificidade"
     ,main=paste0("Área sob Curva ROC: ",AUC.USE.3D,' (BASE TESTE)'))


abline(a=0,b=1,col='gray70')
# confusion matrix
QUEDA=ifelse(DATA.USE$return,'OCORRE','NÃO OCORRE')
PREVISÃO=ifelse(as.vector(Pred.USE) > as.numeric(Corte.USE), 'QUEDA', 'SEM QUEDA')
CM.USE <- table(PREVISÃO,QUEDA)[c('SEM QUEDA','QUEDA'),]
CM.USE.PROP = prop.table(CM.USE,margin=2)
print(paste0("Base TESTE:"))
print(CM.USE.PROP)


# confusion matrix - usando ponte de corte de treino
c(Corte.USE.TREINO,Corte.USE)
QUEDA=ifelse(DATA.USE$return,'OCORRE','NÃO OCORRE')
PREVISÃO=ifelse(as.vector(Pred.USE) > as.numeric(Corte.USE.TREINO), 'QUEDA', 'SEM QUEDA')
CM.USE <- table(PREVISÃO,QUEDA)[c('SEM QUEDA','QUEDA'),]
CM.USE.PROP = prop.table(CM.USE,margin=2)
print(paste0("Base TESTE:"))
print(CM.USE.PROP)

# histogramas probabilidades de quedas
par(mfrow=c(2,1))
hist(as.vector(Pred.USE)[QUEDA=='OCORRE'],freq=F,xlim=c(0,0.4)
     ,xlab='',main='QUEDA OCORRE (BASE TESTE)',ylab='',breaks=40)
abline(v=Corte.USE,col='gray30',lwd=2,lty=1)
hist(as.vector(Pred.USE)[QUEDA!='OCORRE'],freq=F,xlim=c(0,0.4)
     ,xlab='',main='QUEDA NÃO OCORRE (BASE TESTE)',ylab='',breaks=40)
abline(v=Corte.USE,col='gray30',lwd=2,lty=1)
par(mfrow=c(1,1))

# histogramas probabilidades de quedas - usando ponte de corte de treino
par(mfrow=c(2,1))
hist(as.vector(Pred.USE)[QUEDA=='OCORRE'],freq=F,xlim=c(0,0.4)
     ,xlab='',main='QUEDA OCORRE (BASE TESTE)',ylab='',breaks=40)
abline(v=Corte.USE.TREINO,col='gray30',lwd=2,lty=1)
hist(as.vector(Pred.USE)[QUEDA!='OCORRE'],freq=F,xlim=c(0,0.4)
     ,xlab='',main='QUEDA NÃO OCORRE (BASE TESTE)',ylab='',breaks=40)
abline(v=Corte.USE.TREINO,col='gray30',lwd=2,lty=1)
par(mfrow=c(1,1))